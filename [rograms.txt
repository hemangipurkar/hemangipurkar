BUBBLE SELECTION SORT
def Selection_Sort(marks):
    for i in range(len(marks)):

        # Find the minimum element in remaining unsorted array
        min_idx = i
        for j in range(i + 1, len(marks)):
            if marks[min_idx] > marks[j]:
                min_idx = j

        # Swap the minimum element with the first element
        marks[i], marks[min_idx] = marks[min_idx], marks[i]

    print("Marks of students after performing Selection Sort on the list : ")
    for i in range(len(marks)):
        print(marks[i])

#<--------------------------------------------------------------------------------------->

# Function for Bubble Sort of elements

def Bubble_Sort(marks):
    n = len(marks)
    # Traverse through all array elements
    for i in range(n - 1):
        # Last i elements are already in place
        for j in range(0, n - i - 1):

            # Traverse the array from 0 to n-i-1
            # Swap if the element found is greater than the next element
            if marks[j] > marks[j + 1]:
                marks[j], marks[j + 1] = marks[j + 1], marks[j]

    print("Marks of students after performing Bubble Sort on the list :")
    for i in range(len(marks)):
        print(marks[i])

#<--------------------------------------------------------------------------------------->

# Function for displaying top five marks

def top_five_marks(marks):
    print("Top",len(marks),"Marks are : ")
    print(*marks[::-1], sep="\n")

#<---------------------------------------------------------------------------------------->

# Main

marks=[]
n = int(input("Enter number of students whose marks are to be displayed : "))
print("Enter marks for",n,"students (Press ENTER after every students marks): ")
for i in range(0, n):
    ele = int(input())
    marks.append(ele)  # adding the element

print("The marks of",n,"students are : ")
print(marks)

flag=1;
while flag==1:
    print("\n---------------MENU---------------")
    print("1. Selection Sort of the marks")
    print("2. Bubble Sort of the marks")
    print("3. Exit")
    ch=int(input("\n\nEnter your choice (from 1 to 3) : "))

    if ch==1:
        Selection_Sort(marks)
        a=input("\nDo you want to display top marks from the list (yes/no) : ")
        if a=='yes':
            top_five_marks(marks)
        else:
            print("\nThanks for using this program!")
            flag=0

    elif ch==2:
        Bubble_Sort(marks)
        a = input("\nDo you want to display top five marks from the list (yes/no) : ")
        if a == 'yes':
            top_five_marks(marks)
        else:
            print("\nThanks for using this program!")
            flag = 0

    elif ch==3:
        print("\nThanks for using this program!!")
        flag=0

    else:
        print("\nEnter a valid choice!!")
        print("\nThanks for using this program!!")
        flag=0


INSERTION SORT
def insertionSort(array):

    for step in range(1, len(array)):
        key = array[step]
        j = step - 1
        
        # Compare key with each element on the left of it until an element smaller than it is found
        # For descending order, change key<array[j] to key>array[j].        
        while j >= 0 and key < array[j]:
            array[j + 1] = array[j]
            j = j - 1
        
        # Place key at after the element just smaller than it.
        array[j + 1] = key


data = [9, 5, 1, 4, 3]
insertionSort(data)
print('Sorted Array in Ascending Order:')
print(data)


Shell sort 


def shellSort(array, n):

    # Rearrange elements at each n/2, n/4, n/8, ... intervals
    interval = n // 2
    while interval > 0:
        for i in range(interval, n):
            temp = array[i]
            j = i
            while j >= interval and array[j - interval] > temp:
                array[j] = array[j - interval]
                j -= interval

            array[j] = temp
        interval //= 2


data = [9, 8, 3, 7, 5, 6, 4, 1]
size = len(data)
shellSort(data, size)
print('Sorted Array in Ascending Order:')
print(data)



# Function for displaying top five marks

def top_five_marks(marks):
    print("Top",len(marks),"Marks are : ")
    print(*marks[::-1], sep="\n")

#<---------------------------------------------------------------------------------------->

# Main

marks=[]
n = int(input("Enter number of students whose marks are to be displayed : "))
print("Enter marks for",n,"students (Press ENTER after every students marks): ")
for i in range(0, n):
    ele = int(input())
    marks.append(ele)  # adding the element

print("The marks of",n,"students are : ")
print(marks)

flag=1;
while flag==1:
    print("\n---------------MENU---------------")
    print("1. Insertion Sort of the marks")
    print("2. Shell Sort of the marks")
    print("3. Exit")
    ch=int(input("\n\nEnter your choice (from 1 to 3) : "))

    if ch==1:
        insertionSort(marks)
        a=input("\nDo you want to display top marks from the list (yes/no) : ")
        if a=='yes':
            top_five_marks(marks)
        else:
            print("\nThanks for using this program!")
            flag=0

    elif ch==2:
        shellSort(marks)
        a = input("\nDo you want to display top five marks from the list (yes/no) : ")
        if a == 'yes':
            top_five_marks(marks)
        else:
            print("\nThanks for using this program!")
            flag = 0

    elif ch==3:
        print("\nThanks for using this program!!")
        flag=0

    else:
        print("\nEnter a valid choice!!")
        print("\nThanks for using this program!!")
        flag=0

QUICK SORT
def partition(array, low, high):

  # choose the rightmost element as pivot
  pivot = array[high]

  # pointer for greater element
  i = low - 1

  # traverse through all elements
  # compare each element with pivot
  for j in range(low, high):
    if array[j] <= pivot:
      # if element smaller than pivot is found
      # swap it with the greater element pointed by i
      i = i + 1

      # swapping element at i with element at j
      (array[i], array[j]) = (array[j], array[i])

  # swap the pivot element with the greater element specified by i
  (array[i + 1], array[high]) = (array[high], array[i + 1])

  # return the position from where partition is done
  return i + 1

# function to perform quicksort
def quickSort(array, low, high):
  if low < high:

    # find pivot element such that
    # element smaller than pivot are on the left
    # element greater than pivot are on the right
    pi = partition(array, low, high)

    # recursive call on the left of pivot
    quickSort(array, low, pi - 1)

    # recursive call on the right of pivot
    quickSort(array, pi + 1, high)


data = [8, 7, 2, 1, 0, 9, 6]
print("Unsorted Array")
print(data)

size = len(data)

quickSort(data, 0, size - 1)

print('Sorted Array in Ascending Order:')
print(data)

STUDENT CLUB

#include<stdio.h>
#include <iostream>
#include<string>
using namespace std;

class list;

class node
{
	int prn;
	string name;
	node *next;
public:
	node(int x,string nm)
{
		prn=x;
		next=NULL;
		name=nm;
}

friend class list;
};
class list
{
	node *start;
public:
	list(){
		start=NULL;
	}
	void create();
	void display();
	void insertAtBeginning();
	void insertAtEnd();
	void insertAfter();
	void deleteAtFirst();
	void deleteByValue();
	void deleteAtEnd();
	int computeTotal();
	void sortList();
	void concatList(list &q1);
	void displayRev(node *t);
	bool reverseDisplay() //function is only for passing start as argument to recursive function
         {
        	 if(start==NULL)
        		return false;
        	 node *temp=start;
        	 displayRev(temp);
        	 //cout<<"(President)";
        	 return true;
         }
};
void list::displayRev(node *t)
{
	if(t==NULL)
		return;
	else
	{
		displayRev(t->next);
		cout<<"\nPRN NO:"<<t->prn<<" Name: "<<t->name;
	}
}
void list::create()
{
	int no;
	string nam;
	if(start==NULL)
	{
		cout<<"Enter PRN number: ";
		cin>>no;
		cout<<"Enter name: ";
		cin>>nam;
		cout<<nam;
		start=new node(no,nam);
		cout<<"\n====== List Created =====";
		
	}
	else
	{
		cout<<"\nList is already created.";
	}
}
void list::display()
{
	node *t;
	t=start;
	if(start==NULL)
		cout<<"\nList is Empty";
	else
	{ cout<<"\n====== List: ======\n";
		while(t!=NULL){
			cout<<t->prn<<"  "<<t->name<<" \n";
					t=t->next;
		}
		//cout<<t->prn<<"  "<<t->name<<" \n";
	}
}
void list::insertAtBeginning()
{
	int no;
	string nam;
 node *temp;
 if(start==NULL)
 {
	 create();
 }
 else
 {
	 cout<<"\nEnter PRN number: ";
	 cin>>no;
	 cout<<"Enter name: ";
	 cin>>nam;
	 //cout<<nam;
	 temp=new node(no,nam);
	 temp->next=start;
	 start=temp;;
	 cout<<"Inserted  "<<temp->name<<" at the beginning.";
 }
}
void list::insertAtEnd()
{
	int no;
	string nam;
	node *t;
	if(start==NULL)
		create();
	else
	{
	 cout<<"\nEnter PRN number: ";
	 cin>>no;
	 cout<<"Enter name: ";
	 cin>>nam;
	 t=start;
	 while(t->next!=NULL)
	 	t=t->next;
	 	
	 	node*p=new node(no,nam);
	 	t->next=p;
	}
}
void list::insertAfter()
{
	int prev_no;
	cout<<"\nENter PRN No. after do you want insert:";
	cin>>prev_no;
	node *t;
	t=start;
	string nam;
	int flag=0,no;
	while(t!=NULL)
	{
		if(t->prn==prev_no)
		{
			flag=1;break;
		}
		t=t->next;
	}
	if(flag==1)
	{
		node *p;
		cout<<"\nEnter PRN number: ";
	 cin>>no;
	 cout<<"Enter name: ";
	 cin>>nam;
	 p=new node(no,nam);
	 p->next=t->next;
	 t->next=p;
	}
	else
	{
		cout<<"\n"<<prev_no<<" is not in list.";
	}
	
}

void list::deleteAtFirst()
{
	node *t;
	if(start==NULL)
		cout<<"\nClub is Empty..";
	else
	{
	t=start;
	start=start->next;
	t->next=NULL; //Not necessary
	delete t;
	cout<<"\nPresident deleted..";
}
}

void list::deleteByValue()
{
	int no,flag=0;
	node *t,*prev;
	if(start==NULL)
		cout<<"\nList/Club is empty;";
	else
	{
		cout<<"\nEnter PRN no. of member to be deleted: ";
		cin>>no;
		t=start->next; //t=start if we have to delete precident also.. start->next is first member
		while(t->next!=NULL)
		{
			if(t->prn==no){
				flag=1;
				break;
			}
			prev=t;
			t=t->next;
		}
		if(flag==1)
		{
			prev->next=t->next;
			t->next=NULL;
			delete t;
			cout<<"\nMember with prn no: "<<no<<" is deleted.";
		}
		else
			cout<<"\nMember not found in List./president or secretary cannot be deleted.";
	}
}
void list::deleteAtEnd()
{
	node *t,*prev;
	t=start;
		if(start==NULL)
		cout<<"\nClub is Empty..";
	else
	{
	while(t->next!=NULL)
	{
		prev=t;
		t=t->next;
	}
	prev->next=NULL;
	delete t;
	cout<<"\nSecretary Deleted.";
}
}
int list::computeTotal()
{
node *t;
int count=0;
t=start;
if(start==NULL)
{
	cout<<"\nList is empty.";
	return 0;
}
while(t!=NULL)
{
count++;
t=t->next;
}

return count;
}

void list::sortList()
{
	node *i,*j,*last=NULL;
	int tprn;
	string tname;

if(start==NULL)
{
	cout<<"\nList is empty.";
	return ;
}
for(i=start;i->next!=NULL;i=i->next)
{
	for(j=start;j->next!=last;j=j->next)
	{
		if((j->prn)>(j->next->prn))
		{
			tprn=j->prn;
			tname=j->name;
			j->prn=j->next->prn;
			j->name=j->next->name;

			j->next->prn=tprn;
			j->next->name=tname;

		}
	}
}
cout<<"\n List is sorted.";
display();
}
void list::concatList(list &q1)
{
	node *t,*p;
	t=q1.start;
	if(t==NULL)
	{
		cout<<"\nList 2 is empty";
		return;
	}
	p=start; //first list
	while(p->next!=NULL)
	{
		p=p->next;
	}
	p->next=t;
	q1.start=NULL; //second list is set to  null
	cout<<"\nAfter concatenationlist";
	display();
	
}
int main() {
	list *l;
	int choice,selectList;
	list l1,l2;
	l=&l1;
	X:cout<<"\nSelect List\n1.List 1\n2.List 2\nEnter choice: ";
	cin>>selectList;

	if(selectList==1)
	{
		l=&l1;
	}
	else if(selectList==2)
	{
		l=&l2;
	}
	else
	{
		cout<<"\nWrong list Number.";
		goto X;
	}
	do
	{
		cout<<"\n1. create\n2.Insert President\n3.Insert secretary\n4.insert after position(member)\n5.Display list"
		<<"\n6.Delete President\n7.Delete Secretary\n8.Delete Member\n9.Find total No. of members\n10.Sort list\n11. Reselect List ++--##"
		<<"\n12.Combine lists\n13.Reverse Display\n0. Exit\nENter your choice:\t";
		cin>>choice;

		switch(choice)
		{
			case 1: l->create();
				break;
			case 2:	l->insertAtBeginning();
				break;
			case 3: l->insertAtEnd();
				break;
			case 4: l->insertAfter();
				break;
			case 5: l->display();
				break;
			case 6: l->deleteAtFirst();
				break;
			case 7: l->deleteAtEnd();
				break;
			case 8: l->deleteByValue();
				break;
			case 9:	cout<<"\nTotal members(including President & Secretary): "<<l->computeTotal();
				break;
			case 10: l->sortList();
			break;
			case 11:
				goto X;
				break;
				case 12:
					l1.concatList(l2);
					break;
				case 13:
					l->reverseDisplay();
					break;
			deafult:
				 cout<<"Wrong choice";
		}
	}while(choice!=0);
cout<<"\n========== GOOD BYE ====================\n";
	
	return 0;
}

ICECREAM
#include <iomanip>
#include <iostream>
using namespace std;

class Student
{
	int rollNo;
	string name;
	Student *next;
	friend class SecondYear;
public:
	Student()
{
		rollNo=-1;
		name="";
		next=NULL;
}
	Student(int rollNo,string name)
	{
		next=NULL;
		this->rollNo=rollNo;
		this->name=name;
	}
	void printStudentData()
	{
		cout<<endl<<setw(7)<<rollNo<<setw(20)<<name;
	}
};
class SecondYear
{
	Student *start;
public:
	SecondYear()
{
		start=NULL;
}
	Student* getStart()
	{
		return start;
	}
	void AddStudent(int rollNo,string name)
	{
		Student *s=new Student(rollNo,name);
		if(start==NULL)
			start=s;
		else
		{
			s->next=start;
			start=s;
		}
	}
	bool deleteStudent(int rollNo)
	{
		if(start==NULL)
			return false;
		else if(start->next==NULL)
		{
			Student *temp=start;
			start=NULL;
			delete temp;
			return true;
		}
		else
		{
			Student *prev=NULL,*temp=start;
			while(temp!=NULL)
			{
				if(temp->rollNo==rollNo)
					break;
				prev=temp;
				temp=temp->next;
			}
			if(temp==NULL)
				return false;
			if(temp==start)
				start=start->next;
			else
				prev->next=temp->next;
			delete temp;
			return true;
		}
	}
	void onlySet(SecondYear *list2)
	{
		Student *temp2=list2->start;
		Student *temp1=this->start;
		while(temp1!=NULL)
		{
			bool isPresent=false;
			temp2=list2->start;
			while(temp2!=NULL)
			{
				if(temp1->rollNo==temp2->rollNo)
				{
					isPresent=true;
					break;
				}
				temp2=temp2->next;
			}
			if(!isPresent)
				temp1->printStudentData();
			temp1=temp1->next;
		}
	}
	SecondYear* unionSet(SecondYear *list2)
	{
		Student *temp1=start;
		Student *temp2=list2->start;
		SecondYear *temp3=new SecondYear;
		while(temp1!=NULL)
		{
			temp1->printStudentData();
			temp3->AddStudent(temp1->rollNo,temp1->name);
			temp1=temp1->next;
		}
		while(temp2!=NULL)
		{
			bool isPresent=false;
			temp1=start;
			while(temp1!=NULL)
			{
				if(temp1->rollNo==temp2->rollNo)
				{
					isPresent=true;
					break;
				}
				temp1=temp1->next;
			}
			if(!isPresent)
			{
				temp2->printStudentData();
				temp3->AddStudent(temp2->rollNo,temp2->name);
			}
			temp2=temp2->next;
		}
		return temp3;
	}
	void displayNone(SecondYear *unionSetAB)
	{
		Student *temp1=start;
		Student *temp2=unionSetAB->start;

		while(temp1!=NULL)
		{
			bool isPresent=false;
			temp2=unionSetAB->start;
			while(temp2!=NULL)
			{
				if(temp1->rollNo==temp2->rollNo)
				{
					isPresent=true;
					break;
				}
				temp2=temp2->next;
			}
			if(!isPresent)
				temp1->printStudentData();
			temp1=temp1->next;
		}

	}
	void intersection(SecondYear *list2)
	{
		Student *temp1=start;
		Student *temp2=NULL;
		while(temp1!=NULL)
		{
			temp2=list2->start;
			while(temp2!=NULL)
			{
				if(temp1->rollNo==temp2->rollNo)
				{
					temp1->printStudentData();
					break;
				}
				temp2=temp2->next;
			}
			temp1=temp1->next;
		}
	}

	void displayStudents()
	{
		Student *temp=start;
		cout<<endl<<setw(7)<<"RollNos" <<setw(20)<<"Names";
		while(temp!=NULL)
		{
			temp->printStudentData();
			temp=temp->next;
		}

	}

};
int main()
{
	SecondYear *A,*B,*universalSet,*temp=NULL;
	A=new SecondYear;
	B=new SecondYear;
	universalSet=new SecondYear;
	int x=-1,opt,flav;
	int rollNo;
	string name;
	bool del=false;
	do
	{
		cout<<endl;
		cout<<"************ Second Year Students Volatile Database *****************";
		cout<<endl<<"1.Enter student\n2.Delete Student\n3.Display students\n4.Display Students(like-Vanilla)";
		cout<<"\n5.Display Students(like-Butterscotch)"<<"\n6.Display Students(like-both Vanilla and ButterScotch)";
		cout<<"\n7.Display Students(like-none of them)\n8.Display Students(like-either Vanilla or ButterScotch or Both)\n9.Exit";
		cout<<endl;
		cin>>opt;
		switch(opt)
		{
		case 1:
			cout<<"\nEnter the name of student ";
			cin>>name;
			cout<<"\nEnter RollNo";
			cin>>rollNo;
			cout<<"\nEnter the flavour liked:\n1.ButterScotch\n2.Vanilla\n3.Both\n4.None";
			cin>>flav;
			switch(flav)
			{
			case 1:B->AddStudent(rollNo,name);
			break;
			case 2:A->AddStudent(rollNo,name);
			break;
			case 3:A->AddStudent(rollNo,name);
			B->AddStudent(rollNo,name);
			break;
			case 4:break;
			default:"Wrong option";
			}
			if(flav>=1 && flav<=4)
				universalSet->AddStudent(rollNo,name);
			break;
			case 2:
				cout<<"Enter rollNo";
				cin>>rollNo;
				del=false;
				if(A->deleteStudent(rollNo))
				{
					universalSet->deleteStudent(rollNo);
					del=true;
				}
				if(B->deleteStudent(rollNo))
				{
					universalSet->deleteStudent(rollNo);
					del=true;
				}
				if(universalSet->deleteStudent(rollNo))
					del=true;
				if(!del)
					cout<<endl<<"No such student";
				else
					cout<<endl<<"Deleted from database";
				break;
			case 3:
				universalSet->displayStudents();
				break;
			case 4:
				A->onlySet(B);
				break;
			case 5:
				B->onlySet(A);
				break;
			case 6:
				A->intersection(B);
				break;
			case 7:
				temp=A->unionSet(B);
				universalSet->displayNone(temp);
				delete temp;
				break;
			case 8:temp=A->unionSet(B);
			temp->displayStudents();
			delete temp;
			break;
			case 9:break;
			default:cout<<"Wrong option";
			break;
		}
	}while(x!=9);

}

PALINDROME
#include<iostream>
using namespace std;
class strng
{	public:
	char cInp[30],cWSpace[30],cStack[20],cReverse[30];
	int top;
	public:
		strng()
		{
			top=-1;
		}
	
		void Palindrome1();
		void reverse1();
		void push(char );
		char pop();
};
void strng :: push(char element)
{
	if(top<20)
		cStack[++top]=element;
	else
		cout<<"Stack Full";
}
char strng :: pop()
{
	if(top!=-1)
		return cStack[top--];
	else
		cout<<"Stack Empty";
}



void strng :: Palindrome1()
{
	int i=0,b=1;
	cout<<"\n\nEnter the String:";
	cin>>cWSpace;
	cout<<"\n\nEntered the String is:"<<cWSpace;
	while(cWSpace[i]!='\0')
	{
		push(cWSpace[i]);
		i++;
	}
	i=0;
	while(cWSpace[i]!='\0')
	{
		char ch=pop();
		if(cWSpace[i]!=ch)
			b=0;
		i++;
	}
	if(b==1)
	cout<<"\n\nTHE STRING IS PALINDROME";
	else
	cout<<"\n\nTHE STRING IS NOT PALINDROME";
}

void strng :: reverse1()
{
	int i=0;
	cout<<"\nEnter the String:";
	cin>>cWSpace;
	cout<<"\nEntered the String is:"<<cWSpace;
	while(cWSpace[i]!='\0')
	{
		push(cWSpace[i]);
		i++;
	}
	i=0;
	while(cWSpace[i]!='\0')
	{
		char ch=pop();
		cReverse[i]=ch;
		i++;
	}
	cReverse[i]='\0';
	cout<<"\nReverse String is:"<<cReverse;
	cout<<"\n";
	
}


int main()
{	
	strng a;
    a.Palindrome1();
	a.reverse1();
	return 0;
	
}

POSTFIX
#include<iostream>
using namespace std;

#define MAX 20
class stack
{
	int top,topeval;
	char infix[MAX], postfix[MAX],stk[MAX];
	float stkeval[MAX];
	public:
	stack();
	void push(char);
	void pusheval(float);
	void read();
	int IsEmpty ();
	int IsEmptyeval ();
	char pop();
	float popeval();
	void covert_infix_postfix();
	int priority(char x);
	float evaluatepostfix();
};

stack :: stack ()
{
	top=-1;
	topeval=-1;
}

int stack :: IsEmpty ()
{
	 //top is always at last added element
	if (top == -1) 		//check if elements were added
		return (-1);
	else
		return (1);
}
int stack :: IsEmptyeval ()
{
	 //top is always at last added element
	if (topeval == -1) 		//check if elements were added
		return (-1);
	else
		return (1);
}

void stack :: push(char temp)
{
	 //top is always at last added element (earlier element).
	top ++;	 		//take it to empty position
	if (top == MAX)		//check if there is any space
		cout<<"Stack is Full";
	else
	{
		stk [top] = temp;	//add value at topth position
	       //	cout<<"New element pushed on the stack";
	}

}
void stack :: pusheval(float temp)
{
	 //top is always at last added element (earlier element).
	topeval ++;	 		//take it to empty position
	if (topeval == MAX)		//check if there is any space
		cout<<"Stack is Full";
	else
	{
		stkeval [topeval] = temp;	//add value at topth position
	       //	cout<<"New element pushed on the stack";
	}

}

char stack :: pop()
{
	int status;
	char temp;
	status = IsEmpty ();
	if (status == -1) {
		//cout<<"Stack is Empty";
		return ('@');
	}
	else	{
		temp = stk [top--];	//fetch topth position in temp
		return (temp);
	}
}

float stack :: popeval()
{
	int status;
	float temp;
	status = IsEmptyeval ();
	if (status == -1) {
		//cout<<"Stack is Empty";
		return (-999);
	}
	else	{
		temp = stkeval [topeval--];	//fetch topth position in temp
		return (temp);
	}
}
void stack :: read()
{
	cout<<"Enter infix expression ";
	cin>>infix;
}


void stack :: covert_infix_postfix()
{
	int i,k=0;
	char sop;
	for(i=0;infix[i]!='\0';i++)
	{
		if(infix[i]>='0' && infix[i]<='9')
		{
		
			postfix[k++] = infix[i];
		}
		else if(infix[i]=='(')
		{
				push(infix[i]);

		}
				else if(infix[i]==')')
		{
			while((sop=pop())!='(')
				//pop all operators till  (  doesn t come
				postfix[k++]=sop;
		}
		else	//if any operators
		{
			while(priority(infix[i]) <= priority(sop=pop()))
			{
			//till all higher priority operators are not popped, continue & write them in answer
				postfix[k++] = sop;
				if(top==-1)
					break;
			}
			//when all higher operators are done,
			if(priority(infix[i]) > priority(sop))
			{
				push(sop);	//re-push the oper taken for comparison
			}
			push(infix[i]);	//push the operator from i/p to stack
		}
		}//for
	while(top!=-1)
	{
			//pop all remaining operators from stack
			sop = pop();
			postfix[k++] = sop;
	}
	postfix[k-1]='\0';
	cout<<endl<<"The postfix is : "<<postfix;
	}

int stack :: priority(char x)
{
	switch(x)
	{
		case '@':
			return -1;
		case '(':
			return 0;
		case '+':
			return 1;
		case '-':
			return 1;
		case '*':
			return 2;
		case '/':
			return 2;
	}
}

float stack :: evaluatepostfix()
{
	float value,operand1,operand2,result;
	for(int i=0;postfix[i]!='\0';i++)
	{
		// Push operands onto the stack
		if(postfix[i]>='0' && postfix[i]<='9')
		{
			value = postfix[i] - 48;
			pusheval(value);
		}

		// If its an operator, pop 2 operands from the stack
		else
		{
			operand2=popeval();
			operand1=popeval();
			switch(postfix[i])
			{
			case '+':
				result=operand1+operand2;
				break;
			case '*':
				result=operand1*operand2;
				break;
			case '-':
				result=operand1-operand2;
				break;
			case '/':
				result=operand1/operand2;
				break;
			}
			pusheval(result);
		}
	}
	result=popeval();
	return result;
}
int main()
{
	stack s;
	float answer;
	s.read();
	s.covert_infix_postfix();
	answer=s.evaluatepostfix();
	cout<<endl<<"The answer is : "<<answer;
	return 0;
}

JOB QUEUE
#include<iostream>
#define SIZE 10
using namespace std;

class priority
{
	int Queue1[SIZE],front,rear;
	public:
		priority()
		{
			front=0;
			rear=-1;
		}
		int isFull();
		int isEmpty();
		void Enqueue(int x);
		int Dequeue();
};

int priority::isFull()
{
	if(rear==SIZE-1)
		return 1;
	else
		return 0;
}

int priority::isEmpty()
{
	if(rear==front-1)
		return 1;
	else
		return 0;
}

int priority::Dequeue()
{
	if(isEmpty()==1)
	{
		cout<<endl<<" Queue EMPTY...!";
	}
	else
	{
		return Queue1[front++];
	}
}

void priority::Enqueue(int x)
{
	if(isFull()==1)
	{
		cout<<endl<<" Queue full..!";
	}
	else
	{
		rear++;

		if(rear==0)
			Queue1[rear]=x;
		else
		{
			int index;
			
			for(index=rear-1; index>=0; index--)
			{
				if(x < Queue1[index])
				{
					Queue1[index+1]=Queue1[index];
				}
				else
				{
					break;
				}
			}
			Queue1[index+1]=x;
		}


		cout<<endl<<"Priority Queue: ";
		for(int i=0;i<=rear;i++)
		cout<<Queue1[i]<<",";
	}
}

int main()
{
	priority obj;
	int i, n, p, d;
	
	cout<<"\n How many jobs: ";
	cin>>n;

	for(i=0;i<n;i++)
	{
		cout<<"\n Enter job(1-9): ";
		cin>>p;
		obj.Enqueue(p);
	}

	cout<<"\n Dequeue:";
	while(!obj.isEmpty())
	{
		d=obj.Dequeue();
		cout<<endl<<d<<", ";
	}
	
	cout<<endl;

	return 22;
}

DEQUEUE
#include <iostream>

#define MAX 20

using namespace std;

class deque
{
	int x[MAX];
	int front;
	int rear;
	public:
		void initialize();
		void enqueueRight(int);
		void display();
		int dequeueLeft();
		void enqueueLeft(int);
		int dequeueRight();
	
	
};

void deque::initialize()
{
	front=-1;
	rear=-1;
}

int main()
{
	deque q;
	int ch,x,flag=1,c2;
	while(flag)
	{
		cout<<"\n\n1. Enqueue (From Front)\n2. Enqueue (From Rear)\n3. Dequeue Right\n4. Dequeue Left\n5. Display\n6. Exit\n\n";
		cin>>ch;
		switch(ch)
		{
			case 1:
				cout<<"\nEnter the Element: ";
				cin>>x;
				q.enqueueLeft(x);
				break;
		        case 2:
				cout<<"\nEnter the Element: ";
				cin>>x;
				q.enqueueRight(x);
				break;
		        case 3:
				x=q.dequeueRight();
				cout<<"\nRemoved "<<x<<" from the Dequeue\n";
				break;
		        case 4:
				x=q.dequeueLeft();
				cout<<"\nRemoved "<<x<<" form the Dequeue\n";
				break;
		        case 5:
				q.display();
				break;
			case 6:
				flag=0;
				break;
			default:
				cout<<"\nWrong choice!!! Try Again.\n";
		}
	}
	return 0;
}

void deque::enqueueRight(int p)
{
	if(rear==MAX)
	{
		cout<<"\nDequeue Full from Right\n";
	}
	else
	{
		x[++rear]=p;
		if(front==-1)
		{
			front=0;
		}
	}
}

void deque::enqueueLeft(int p)
{
	if(rear==-1 && front==-1)
	{
		enqueueRight(p);
	}
	else if(front==0)
	{
		cout<<"\nDequeue Full from Left\n";
	}
	else
	{
		x[--front]=p;
	}
}

int deque::dequeueLeft()
{
	int p;
	if(rear==-1 && front==-1)
	{
		cout<<"\nDequeue Empty!!!\n";
	}
	else if(front==rear)
	{
		p=x[front];
		front=rear=-1;
		return p;
	}
	else
	{
		return x[front++];
	}
}

int deque::dequeueRight()
{
	int p;
	if(rear==-1 && front==-1)
	{
		cout<<"\nDequeue Empty!!!\n";
	}
	else if(front==rear)
	{
		p=x[front];
		front=rear=-1;
		return p;
	}
	else
	{
		return x[rear--];
	}
}

void deque::display()
{
	int i;
	if(front==-1&&rear==-1)
	{
		cout<<"\nDequeue Empty!!!";
	}
	else
	{
		cout<<"\nDequeue is:\n";
		for(i=front;i<=rear;i++)
		{
			cout<<x[i]<<"\n";
		}
	}
}

CIRCULAR QUEUE PIZZA PARLOUR
#include <iostream> 
using namespace std; 
const int MAX=5; 
class Order 
{ 
  int order_id; 
  char orderer_name[10]; 
  public: 
  void acceptOrder() 
  { 
    cout<<"\nEnter Order ID :: "; 
    cin>>order_id; 
    cout<<"\nEnter Orderer Name ::"; 
    cin>>orderer_name; 
  } 
  void displayOrder() 
  { 
    cout<<"\n\t"<<order_id<<"\t\t"<<orderer_name; 
  } 
  friend class Queue; 
}; 
class Queue 
{ 
  Order data[MAX]; 
  int front,rear; 
  public: 
  Queue() 
  { 
    front=rear=-1; 
  } 
  void enqueue(); 
  void dequeue(); 
  int isFull(); 
  int isEmpty(); 
  void display(); 
}; 
//---------------------------------------------------- 
int Queue::isFull() 
{ 
  if((front==(rear+1)%MAX ))
    return 1; 
  else 
    return 0; 
} 
//---------------------------------------------------- 
int Queue::isEmpty() 
{ 
  if(rear==-1) 
    return 1; 
  else 
    return 0; 
} 
//---------------------------------------------------- 
void Queue::enqueue() 
{ 
  if(isFull()) 
  { 
    cout<<"\nCan't place order ! Queue is Full !"; 
  } 
  else 
  { 
    Order temp; 
    temp.acceptOrder(); 
    if(front==-1) 
    { 
          front=0; 
    } 
    rear=(rear+1)%MAX;
    data[rear]=temp; 
    cout<<"\nOrder Placed successfully"; 
    
  } 
} 
//---------------------------------------------------- 
void Queue::dequeue() 
{ 
  if(isEmpty()) 
  { 
    cout<<"\nNo orders to Serve !"; 
  } 
  else 
  { 
    front=(front+1)%MAX; 
    cout<<"\nOrder Served successfully !"; 
    if(front==rear) 
      front=rear=-1; 
  } 
} 
//---------------------------------------------------- 
void Queue::display() 
{ 
  if(isEmpty()) 
  { 
    cout<<"\nNo orders to display !"; 
  } 
  else 
  { 
    int i=front; 
    cout<<"\n\t----------- Orders in Queue -------------"; 
    cout<<"\n\n\tOrder ID\tOrderer Name"; 
    cout<<"\n\t-----------------------------------------"; 
    if(front<=rear) 
    { 
      while(i<=rear) 
      { 
        data[i].displayOrder(); 
        i++; 
      } 
    } 
    else 
    { 
      while(i<MAX) 
      { 
        data[i].displayOrder(); 
        i++; 
      } 
      i=0; 
      while(i<=rear) 
      { 
        data[i].displayOrder(); 
        i++; 
      } 
    } 
  } 
} 
//---------------------------------------------------- 
int main() 
{ 
  int ch; 
  Queue q; 
  cout<<"\n-------------- Pizza Parlor Menu --------------"; 
  cout<<"\n1. Place Order"; 
  cout<<"\n2. Serve Order"; 
  cout<<"\n3. Display Orders"; 
  cout<<"\n4. Exit"; 
  do 
  { 
    cout<<"\n--------------------------------------"; 
    cout<<"\nEnter your choice :: "; 
    cin>>ch; 
    cout<<"\n--------------------------------------"; 
    switch(ch) 
    { 
      case 1: 
          q.enqueue(); 
          break; 
      case 2: 
          q.dequeue(); 
          break; 
      case 3: 
          q.display(); 
          break; 
    } 
  }while(ch!=4); 
} 
 
 

 



















